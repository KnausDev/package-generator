<?php

namespace KnausDev\PackageGenerator\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Str;

class DomainRoutesCommand extends Command
{
    protected $signature = 'knausdev:domain-routes';

    protected $description = 'Generate a routes file that includes all domain routes';

    public function handle()
    {
        $domainPath = base_path('domains');

        if (!File::isDirectory($domainPath)) {
            $this->error("Domains directory not found at: {$domainPath}");
            return Command::FAILURE;
        }

        // Gather all route files
        $webRoutes = [];
        $apiRoutes = [];

        $domains = File::directories($domainPath);

        foreach ($domains as $domainDirectory) {
            $domainName = basename($domainDirectory);

            // Check routes within domain packages
            $packageDirs = File::directories($domainDirectory);

            if (empty($packageDirs)) {
                // The domain might be a direct package
                $this->gatherRouteFiles($domainDirectory, $domainName, '', $webRoutes, $apiRoutes);
            } else {
                // The domain contains multiple packages
                foreach ($packageDirs as $packageDir) {
                    $packageName = basename($packageDir);
                    $this->gatherRouteFiles($packageDir, $domainName, $packageName, $webRoutes, $apiRoutes);
                }
            }
        }

        // Generate the web routes file
        $this->generateRoutesFile($webRoutes, 'web');

        // Generate the API routes file
        $this->generateRoutesFile($apiRoutes, 'api');

        $this->info('Domain routes registration files generated successfully!');
        $this->info('Add the following line to your routes/web.php file:');
        $this->line("require base_path('routes/domain_web.php');");
        $this->info('Add the following line to your routes/api.php file:');
        $this->line("require base_path('routes/domain_api.php');");

        return Command::SUCCESS;
    }

    /**
     * Gather route files from a domain or package directory.
     */
    protected function gatherRouteFiles(string $directory, string $domainName, string $packageName, array &$webRoutes, array &$apiRoutes): void
    {
        $routesPath = $directory . '/routes';

        if (!File::isDirectory($routesPath)) {
            return;
        }

        // Determine the namespace prefix - always include the domain name
        $namespacePrefix = Str::studly($domainName);
        if (!empty($packageName)) {
            $namespacePrefix .= '\\' . Str::studly($packageName);
        }

        $webRoutePath = $routesPath . '/web.php';
        if (File::exists($webRoutePath)) {
            $routePrefix = $packageName ? "{$domainName}/{$packageName}" : $domainName;
            $webRoutes[] = [
                'path' => $webRoutePath,
                'prefix' => $routePrefix,
                'domain' => $domainName,
                'package' => $packageName,
                'namespace' => $namespacePrefix,
            ];

            $this->info("Found web routes in: {$webRoutePath}");
        }

        $apiRoutePath = $routesPath . '/api.php';
        if (File::exists($apiRoutePath)) {
            $routePrefix = $packageName ? "{$domainName}/{$packageName}" : $domainName;
            $apiRoutes[] = [
                'path' => $apiRoutePath,
                'prefix' => $routePrefix,
                'domain' => $domainName,
                'package' => $packageName,
                'namespace' => $namespacePrefix,
            ];

            $this->info("Found API routes in: {$apiRoutePath}");
        }
    }

    /**
     * Generate the routes file.
     */
    protected function generateRoutesFile(array $routes, string $type): void
    {
        if (empty($routes)) {
            $this->info("No {$type} routes found.");
            return;
        }

        $outputPath = base_path("routes/domain_{$type}.php");

        $content = "<?php\n\n";
        $content .= "use Illuminate\\Support\\Facades\\Route;\n\n";
        $content .= "/*\n";
        $content .= "|--------------------------------------------------------------------------\n";
        $content .= "| Domain {$type} Routes\n";
        $content .= "|--------------------------------------------------------------------------\n";
        $content .= "|\n";
        $content .= "| This file is auto-generated by the knausdev:domain-routes command.\n";
        $content .= "| Do not edit this file directly as it will be overwritten.\n";
        $content .= "|\n";
        $content .= "*/\n\n";

        foreach ($routes as $route) {
            $relativePath = Str::replaceFirst(base_path() . '/', '', $route['path']);
            $content .= "// Domain: {$route['domain']}" . ($route['package'] ? ", Package: {$route['package']}" : '') . "\n";
            $content .= "Route::prefix('{$route['prefix']}')->namespace('{$route['namespace']}')->group(function () {\n";
            $content .= "    require base_path('{$relativePath}');\n";
            $content .= "});\n\n";
        }

        File::put($outputPath, $content);
        $this->info("Generated {$type} routes file: {$outputPath}");
    }
}
