<template>
  <div class="max-w-6xl mx-auto py-6">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-2xl font-semibold">{{ modelName }} List</h1>

      <button
        @click="goToCreate"
        class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
      >
        Create {{ modelName }}
      </button>
    </div>

    <div class="bg-white shadow overflow-hidden border-b border-gray-200 sm:rounded-lg">
      <table class="min-w-full divide-y divide-gray-200">
        <thead class="bg-gray-50">
          <tr>
{{ tableHeaders }}
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200">
          <tr v-for="item in items" :key="item.id">
{{ tableRows }}
            <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
              <button
                @click="goToEdit(item.id)"
                class="text-indigo-600 hover:text-indigo-900 mr-2"
              >
                Edit
              </button>
              <button
                @click="showDeleteConfirm(item)"
                class="text-red-600 hover:text-red-900"
              >
                Delete
              </button>
            </td>
          </tr>
          <tr v-if="items.length === 0">
            <td :colspan="5" class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-center">
              No {{ modelName }}s found
            </td>
          </tr>
        </tbody>
      </table>
    </div>

    <div v-if="pagination && pagination.total > pagination.per_page" class="mt-4 flex justify-center">
      <!-- Pagination component would go here -->
      <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
        <a
          href="#"
          @click.prevent="loadPage(pagination.current_page - 1)"
          :class="pagination.current_page === 1 ? 'cursor-not-allowed' : ''"
          class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50"
        >
          Previous
        </a>
        <template v-for="page in paginationRange" :key="page">
          <a
            href="#"
            @click.prevent="loadPage(page)"
            :class="pagination.current_page === page ? 'bg-blue-50 border-blue-500 text-blue-600' : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'"
            class="relative inline-flex items-center px-4 py-2 border text-sm font-medium"
          >
            {{ page }}
          </a>
        </template>
        <a
          href="#"
          @click.prevent="loadPage(pagination.current_page + 1)"
          :class="pagination.current_page === pagination.last_page ? 'cursor-not-allowed' : ''"
          class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50"
        >
          Next
        </a>
      </nav>
    </div>

    <!-- Delete Confirmation Modal -->
    <div v-if="showConfirmModal" class="fixed inset-0 z-10 overflow-y-auto">
      <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <div class="fixed inset-0 transition-opacity" aria-hidden="true">
          <div class="absolute inset-0 bg-gray-500 opacity-75"></div>
        </div>

        <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>

        <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
          <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
            <div class="sm:flex sm:items-start">
              <div class="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10">
                <!-- Heroicon name: exclamation -->
                <svg class="h-6 w-6 text-red-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                </svg>
              </div>
              <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
                <h3 class="text-lg leading-6 font-medium text-gray-900">
                  Delete {{ modelName }}
                </h3>
                <div class="mt-2">
                  <p class="text-sm text-gray-500">
                    Are you sure you want to delete this {{ modelName.toLowerCase() }}? This action cannot be undone.
                  </p>
                </div>
              </div>
            </div>
          </div>
          <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
            <button
              @click="deleteItem"
              class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 sm:ml-3 sm:w-auto sm:text-sm"
            >
              Delete
            </button>
            <button
              @click="showConfirmModal = false"
              class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
            >
              Cancel
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
export default {
  name: '{{ modelName }}List',

  data() {
    return {
      items: [],
      pagination: null,
      showConfirmModal: false,
      itemToDelete: null,
      isLoading: false
    };
  },

  computed: {
    paginationRange() {
      if (!this.pagination) return [];

      const total = this.pagination.last_page;
      const current = this.pagination.current_page;
      const delta = 2;

      const range = [];
      for (let i = Math.max(2, current - delta); i <= Math.min(total - 1, current + delta); i++) {
        range.push(i);
      }

      if (current - delta > 2) range.unshift('...');
      if (current + delta < total - 1) range.push('...');

      range.unshift(1);
      if (total > 1) range.push(total);

      return range;
    }
  },

  created() {
    this.fetchData();
  },

  methods: {
    async fetchData(page = 1) {
      this.isLoading = true;

      try {
        const response = await axios.get(`{{ apiUrl }}`, {
          params: { page }
        });

        if (response.data.data) {
          this.items = response.data.data;
          this.pagination = response.data.meta;
        } else {
          this.items = response.data;
        }
      } catch (error) {
        console.error('Error fetching data:', error);
      } finally {
        this.isLoading = false;
      }
    },

    loadPage(page) {
      if (page < 1 || (this.pagination && page > this.pagination.last_page)) {
        return;
      }

      this.fetchData(page);
    },

    goToCreate() {
      if (this.$router) {
        this.$router.push({ name: '{{ kebabModelName }}.create' });
      } else {
        window.location.href = `{{ kebabModelName }}/create`;
      }
    },

    goToEdit(id) {
      if (this.$router) {
        this.$router.push({ name: '{{ kebabModelName }}.edit', params: { id } });
      } else {
        window.location.href = `{{ kebabModelName }}/${id}/edit`;
      }
    },

    showDeleteConfirm(item) {
      this.itemToDelete = item;
      this.showConfirmModal = true;
    },

    async deleteItem() {
      if (!this.itemToDelete) return;

      try {
        await axios.delete(`{{ apiUrl }}/${this.itemToDelete.id}`);
        this.fetchData();
        this.showConfirmModal = false;
        this.itemToDelete = null;
      } catch (error) {
        console.error('Error deleting item:', error);
      }
    }
  }
};
</script>
