<template>
  <div class="max-w-4xl mx-auto py-6">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-2xl font-semibold">{{ modelName }} Details</h1>

      <div>
        <button
          @click="goToEdit"
          class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline mr-2"
        >
          Edit
        </button>
        <button
          @click="goBack"
          class="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
        >
          Back
        </button>
      </div>
    </div>

    <div v-if="isLoading" class="text-center py-10">
      <p class="text-gray-500">Loading...</p>
    </div>

    <div v-else-if="!item" class="text-center py-10">
      <p class="text-gray-500">{{ modelName }} not found</p>
    </div>

    <div v-else class="bg-white shadow overflow-hidden sm:rounded-lg">
      <div class="px-4 py-5 sm:px-6">
        <h3 class="text-lg leading-6 font-medium text-gray-900">
          {{ modelName }} Information
        </h3>
        <p class="mt-1 max-w-2xl text-sm text-gray-500">
          ID: {{ item.id }}
        </p>
      </div>
      <div class="border-t border-gray-200">
        <dl>
          <div class="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
            <dt class="text-sm font-medium text-gray-500">
              Created At
            </dt>
            <dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
              {{ formatDate(item.created_at) }}
            </dd>
          </div>

{{ detailFields }}

          <div class="bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
            <dt class="text-sm font-medium text-gray-500">
              Updated At
            </dt>
            <dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
              {{ formatDate(item.updated_at) }}
            </dd>
          </div>
        </dl>
      </div>
    </div>
  </div>
</template>

<script>
export default {
  name: '{{ modelName }}View',

  props: {
    id: {
      type: [Number, String],
      required: true
    }
  },

  data() {
    return {
      item: null,
      isLoading: false
    };
  },

  created() {
    this.fetchData();
  },

  methods: {
    async fetchData() {
      this.isLoading = true;

      try {
        const response = await axios.get(`{{ apiUrl }}/${this.id}`);
        this.item = response.data.data || response.data;
      } catch (error) {
        console.error('Error fetching data:', error);
      } finally {
        this.isLoading = false;
      }
    },

    formatDate(dateString) {
      if (!dateString) return '';
      const date = new Date(dateString);
      return date.toLocaleString();
    },

    goToEdit() {
      if (this.$router) {
        this.$router.push({ name: '{{ kebabModelName }}.edit', params: { id: this.id } });
      } else {
        window.location.href = `{{ kebabModelName }}/${this.id}/edit`;
      }
    },

    goBack() {
      if (this.$router) {
        this.$router.push({ name: '{{ kebabModelName }}.index' });
      } else {
        window.location.href = `{{ kebabModelName }}`;
      }
    }
  }
};
</script>
